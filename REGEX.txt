REGULAR EXPRESSIONS

.TEST
	/abc/.test("abcde") // true
	/abc/.test("abxde")  // false

SETS (match any of the characters)
	/[0123456789]/.test("in 1992") //true
	/[0-9]/.test("in 1992") // true

SHORTCUTS
	\d	Any digit character
	\w	An alphanumeric character (“word character”)
	\s	Any whitespace character (space, tab, newline, and similar)
	\D	A character that is not a digit
	\W	A nonalphanumeric character
	\S	A nonwhitespace character
	.	Any character except for newline

INVERTED SET (^) (match any character except the ones in the set)
	/[^01]/. test("0010101010101") // false
	/[^01]/. test("00101010210101") // true

REPETITION OPERATORS (+ *)
	/'\d+'/.test("'123'") // true
	/'\d*'/.test("'123'") // true
	/'\d*'/.test("''") // true  <- * allows pattern to match zero times

OPTIONAL CHARACTER (?)
	//colou?r.test(color) // true

PRECISE REPETITION ({1})
	{4}	occur exactly four times
	{2,4}	occur atleast twice and atmost 4 times
	{5,}	occur 5 or more times

GROUPING SUBEXPRESSIONS (use () to use * or + on more than one element at a time)
	/boo+(hoo+)+/


.EXECUTE METHOD (returns an object instead of binary)
	match = /\d+/.exec("one two 100")) 
	console.log(match) // ["100"]
	console.log(match.index) // 8  <- index property tells us where in the string the successful match begins
	
.MATCH METHOD(works the same way as .execute but used on strings instead)
	console.log("one two 100").match(/\d+/)); //["100"]
	
DATE CLASS
	console.log(new Date()) // Fri Mar 30 2018 14:46:30 GMT-0600 (Mountain Daylight Time)
	console.log(new Date(2009, 11, 9)) // ? Wed Dec 09 2009 00:00:00 GMT+0100 (CET)
	console.log(new Date().getTime()) // 1387407600000 <- number of milliseconds since 1970, "UNIX" time standard

DATE OBJECT METHODS
	getFullYear, getMonth, getDate, getHours, getMinutes, getSeconds, getYear

WORD AND STRING BOUNDARIES (^ $)
	/^/ matches the start of the input string
	/$/ matches the end of the input string
	/\b/ word boundary, example 	/\bcat\b/.test("concatenate") // false
				  	/\bcar\b/.text("con cat tenate")  //true
CHOICE PATTERNS (|)
	let animalCount = /\b\d+ (pig|cow|chickens)s?\b/;
	console.log(animalCount.test("15 pigs")); //true

.REPLACE METHOD (replace part of the string with another string)
	"Borobudur".replace(/[ou]/, "a") // Barobudur -> only replaces the first match
	"Borobudur".replace(/[ou]/g, "a") // Barabadar -> the g stands for global, meaning replace all matches

SWITCHING GROUPS USING .REPLACE ($1 - $9, $&)
	console.log("Liskov, Barbara\nMcCarthy, John\nWadler, Philip".replace(/(\w+), (\w+)/g, "$2 $1"));
	// ? Barbara Liskov
	//   John McCarthy
	//   Philip Wadler

FUNCTION ARGUMENT ON .REPLACE (function(match, group1, group2...))
	let stock = "1 lemon, 2 cabbages, and 101 eggs";
	function minusOne(match, amount, unit) {
 	 amount = Number(amount) - 1;
 	 if (amount == 1) { // only one left, remove the 's'
   	 unit = unit.slice(0, unit.length - 1);
 	 } else if (amount == 0) {
  	  amount = "no";
	  }
	  return amount + " " + unit;
	}
	console.log(stock.replace(/(\d+) (\w+)/g, minusOne));
	// ? no lemon, 1 cabbage, and 100 eggs
	
	
