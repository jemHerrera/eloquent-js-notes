function buildGraph(edges) {		  			// edges is an array of strings(roads)
  let graph = Object.create(null);    			        // create an object graph{}
  function addEdge(from, to) {		  			// from is a str and to is an arr of str.
    if (graph[from] == null) {		  			// if from property does not exist on graph
      graph[from] = [to];			 	        // add that parameter, set its values to an array of "to"
    } else {
      graph[from].push(to);			  		// if it exists, add the to on the array
    }
  }
  for (let [from, to] of edges.map(r => r.split("-"))) {	//loop through edges, set each element to from and to
    addEdge(from, to);				  		// add roads to graph
    addEdge(to, from);
  }
  return graph;						        	
}												

const roadGraph = buildGraph(roads);				//an object(graph) with
}								//properties(from) and values(array of to's)


console.log(roadGraph);

Alice's House:	["Bob's House", "Cabin", "Post Office"]
Bob's House:	["Alice's House", "Town Hall"]
Cabin:		["Alice's House"]
Post Office:	["Alice's House", "Marketplace"]
Town Hall:	["Bob's House", "Daria's House", "Marketplace", "Shop"]
Daria's House:	["Ernie's House", "Town Hall"]
Ernie's House:	["Daria's House", "Grete's House"]
Grete's House:	["Ernie's House", "Farm", "Shop"]
Farm:		["Grete's House", "Marketplace"]
Shop:		["Grete's House", "Marketplace", "Town Hall"]
Marketplace:	["Farm", "Post Office", "Shop", "Town Hall"]


class VillageState {						
  constructor(place, parcels) {					//place is a string, parcels is array of objects
    this.place = place;						
    this.parcels = parcels;					// [{place, address}, {place, address}]
  }

  move(destination) {						// and example would be 
    if (!roadGraph[this.place].includes(destination)) {		// if there is no road connecting current place to the destination, return the old state
      return this;
    } else {
      let parcels = this.parcels.map(p => {			//iterate through each element of the parcels array
        if (p.place != this.place) return p;			//map will check if there is parcel in current location
        return {place: destination, address: p.address};	//parcel's place property gets updated everytime
      }).filter(p => p.place != p.address);			//remove that parcel from the list
      return new VillageState(destination, parcels);		// create a new villagestate object, with the updated place and parcels
    }
  }
}


function runRobot(state, robot, memory) {			// state is a villagestate object, robot is a function(how robot behaves),
  for (let turn = 0;; turn++) {					// keep looping
    if (state.parcels.length == 0) {				// keep on moving until all the parcels have been delivered
      console.log(`Done in ${turn} turns`);
      break;
    }
    let action = robot(state, memory);				// call the robot function that returns an object with direction property
    state = state.move(action.direction);			// move to the direction that the robot wants to go, and update any parcels at the same time
    memory = action.memory;					//update the memory
    console.log(`Moved to ${action.direction}`);
  }
}

function randomPick(array) {
  let choice = Math.floor(Math.random() * array.length);
  return array[choice];
}

function randomRobot(state) {
  return {direction: randomPick(roadGraph[state.place])};	// robot randomly chooses where to go from the given place
}

VillageState.random = function(parcelCount = 5) {		// create a new village state method of creating random parcels
  let parcels = [];						// create an array of random parcels
  for (let i = 0; i < parcelCount; i++) {
    let address = randomPick(Object.keys(roadGraph));		// pick a random address form roadGraph
    let place;
    do {
      place = randomPick(Object.keys(roadGraph));		// pick a random place, should be different from the address
    } while (place == address);
    parcels.push({place, address});				//add the {place, address} to the parcels array
  }
  return new VillageState("Post Office", parcels);		//the function will then return an new villagState object with the randomly generated parcels
};

const mailRoute = [
  "Alice's House", "Cabin", "Alice's House", "Bob's House",
  "Town Hall", "Daria's House", "Ernie's House",
  "Grete's House", "Shop", "Grete's House", "Farm",
  "Marketplace", "Post Office"
];

function routeRobot(state, memory) {
  if (memory.length == 0) {
    memory = mailRoute;
  }
  return {direction: memory[0], memory: memory.slice(1)};

}


function findRoute(graph, from, to) {
  
  let work = [{at: from, route: []}];				// work is an array of objects, work[0] is predetermined in this line
  
    for (let i = 0; i < work.length; i++) {			// loop through work. initially work only has one element work[0], but .length increases in the next loops
    
    let {at, route} = work[i];					// this line works after the next loops,
    
      for (let place of graph[at]) {				// iterate through every possible connections of current "at"
     
        if (place == to) return route.concat(place);		// if the destination is in one of the options, add the place to the route
      
          if (!work.some(w => w.at == place)) {			// iterate through work array, if the current place is not yet on the list, add the list to work
        
          work.push({at: place, route: route.concat(place)});
      
          }
    
        }
  
    }

  }



example: 
findRoute(roadGraph, Alice's House, Grete's House)		// alice's to grete's

work = [ 0: {at: Alice's House, route:[]}]			// at alice's
	 
1: {at: Bob's House, route:["Bob's House"]}			// at alice's, bob's not on the list yet
	 
2: {at: Cabin, route:["Cabin"]}					// at alice's, cabin's not on the list yet
	 
3: {at: Post Office, route:["Post Office"]}			// at alice's, post Office not one the list yet
	 
4: {at: Town Hall, route:["Bob's House", Town Hall]		// work now has more elements, and now will loop to work[1] which is bob's
								
								// loop through every single connections to bob's

function 


goalOrientedRobot({place, parcels}, route) {
  			// example: ({Post Office, Parcels}, route)
  if (route.length == 0) {
    					// initialy there's no route yet so this is initially true
    let parcel = parcels[0];
    				// go through th first object of parcels array, example	[{Alice's, Town Hall}, {Bob's, cabin}]	
    if (parcel.place != place) {
      				// initially Alice's != Post Office
      route = findRoute(roadGraph, place, parcel.place);
    	// find route from Post Office to Alice's and add it to route array. route will become the memory
    } 
    else {
      
      route = findRoute(roadGraph, place, parcel.address);
   	//if already at the place where th mail is, find route from that place to the address for that mail 
    }
  
  }
  
  return {direction: route[0], memory: route.slice(1)};		//direction will be the first place in that route, and cut that from the memory
		
}


function runRobot(state, robot, memory) {			// state is a villagestate object, robot is a function(how robot behaves),
  for (let turn = 0;; turn++) {					// keep looping
    if (state.parcels.length == 0) {				// keep on moving until all the parcels have been delivered
      console.log(`Done in ${turn} turns`);
      break;
    }
    let action = robot(state, memory);				// call the robot function that returns an object with direction property
    state = state.move(action.direction);			// move to the direction that the robot wants to go, and update any parcels at the same time
    memory = action.memory;					//update the memory
    console.log(`Moved to ${action.direction}`);
  }
}

Measuring a Robot

function measureRobot(state, robot, memory) {
  for (let turn = 0;; turn++) {
    if (state.parcels.length == 0) {
      return turn;
    }
    let action = robot(state, memory);
    state = state.move(action.direction);
    memory = action.memory;
  }
}

function compareRobots(robot1, memory1, robot2, memory2) {
  let robot1Counter = 0;
  let robot2Counter = 0;
  let test = 10000;
  for (let i=0; i<test; i++){
   let task = VillageState.random();
   robot1Counter += measureRobot(task, robot1, memory1);
   robot2Counter += measureRobot(task, robot2, memory2);
  }
  return console.log(`robot1: ${robot1Counter/test} steps; robot2: ${robot2Counter/test} steps`);
}

compareRobots(routeRobot, [], goalOrientedRobot, []);

function findClosest(graph, from, targetPlaces){
  let found = [from];
  for (let i=0; i<found.length; i++){
    for (let place of graph[found[i]]){
      if (targetPlaces.some(p => p==place)) return place;
      if (!found.some(w => w == place)){
        found.push(place);
      }
    }
  }
}

function myRobot({place, parcels}, route) {
  if (route.length == 0) {
    let targets = [];
    for (item of parcels){
      if (place == item.place) {
        if (!targets.some(x => x == item.address)) targets.push(item.address);
      }
      else if (!targets.some(x => x == item.place)) targets.push(item.place);
    }
    let closest = findClosest(roadGraph, place, targets);
    //console.log([place, targets, route, closest]);
    route = findRoute(roadGraph, place, closest);
  }
  return {direction: route[0], memory: route.slice(1)};
}
